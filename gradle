//Gradle (jib, jOOQ, postgres)

import java.time.Instant

buildscript {
    val versionJooq: String by project
    val versionPostgresql: String by project
    repositories {
        maven { url = uri("https://homeserver/repository/maven-public/") }
    }
    dependencies {
        classpath("com.google.cloud.tools:jib-gradle-plugin:3.3.1")
        classpath("commons-io:commons-io:2.7")
        classpath("org.jooq:jooq-codegen:$versionJooq")
        classpath("org.postgresql:postgresql:$versionPostgresql")
    }
}

plugins {
    id("java")
    id("com.google.cloud.tools.jib") version "3.3.1"
    id("io.spring.dependency-management")
    id("org.springframework.boot")
}

apply(plugin = "com.google.cloud.tools.jib")

repositories {
    maven { url = uri("https://homeserver/repository/maven-public/") }
    mavenCentral()
}

val versionSpringBoot: String by project
val versionSpringCloud: String by project
val versionDependencyManagement: String by project
val versionJib: String by project
val versionJooq: String by project
val versionPostgresql: String by project
val versionJava: String by project
val projectVersion: String by project
val release: String? by project
val projectGroup: String by project
group = projectGroup
version = projectVersion

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:$versionSpringBoot")
    }
}

dependencies {
    // Libs
    implementation("homeserver.infra.lib:notification-crud-openapi:0.0.7")
    implementation("homeserver.infra.lib:notification-viewer-openapi:0.0.1")

    // Spring dependency
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-jooq")
    implementation("org.springframework.boot:spring-boot-starter-validation")

    // Jackson
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    // Management endpoints:
    implementation("io.micrometer:micrometer-registry-prometheus")

    //Swagger annotations
    implementation("io.swagger.core.v3:swagger-annotations:2.2.8")

    //JOOQ
    implementation("org.jooq:jooq:$versionJooq")
    implementation("org.jooq:jooq-codegen:$versionJooq")

    //Postgres
    implementation("org.postgresql:postgresql:$versionPostgresql")

    // https://mvnrepository.com/artifact/org.springframework.data/spring-data-commons
    implementation("org.springframework.data:spring-data-commons:3.0.3")

}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

jib {
    setAllowInsecureRegistries(true)
    from {
        image = "homeserver:6000/openjdk11-jre-alpine:latest"
    }
    to {
        image = "homeserver:6000/${rootProject.name.trim()}:${version.toString().trim()}"
        tags = setOf("latest")
        auth {
            username = System.getenv("NEXUS_REPO_USER")
            password = System.getenv("NEXUS_REPO_PASSWORD")
        }
    }
    container {
        ports = listOf("8080")
        jvmFlags = listOf(
            "-server",
            "-Djava.security.egd=file:/dev/./urandom"
        )
        creationTime.set(Instant.now().toString())
    }
}

//JOOQ
val jooq by tasks.creating {
    this.group = "jooq"
    val jooqPackageName = "${project.group}.${project.name.replace("-", ".")}"
    val configuration = org.jooq.meta.jaxb.Configuration()
    configuration.apply {
        jdbc = org.jooq.meta.jaxb.Jdbc().apply {
            driver = "org.postgresql.Driver"
            url = "jdbc:postgresql://k8s.homeserver:5432/infra"
            user = System.getenv("POSTGRES_USER") ?: "postgres"
            password = System.getenv("POSTGRES_PASSWORD") ?: "postgres"
        }
        generator = org.jooq.meta.jaxb.Generator().apply {
            strategy = org.jooq.meta.jaxb.Strategy().apply {
                name = "org.jooq.codegen.example.JPrefixGeneratorStrategy"
            }
            database = org.jooq.meta.jaxb.Database().apply {
                includes = listOf(
                    "notifications",
                    "status",
                    "type"
                ).joinToString("|")
                name = "org.jooq.meta.postgres.PostgresDatabase"
                schemata = listOf(
                    org.jooq.meta.jaxb.SchemaMappingType().apply {
                        inputSchema = "notifications"
                    }
                )
            }
            generate = org.jooq.meta.jaxb.Generate().apply {
                isPojos = false
                isDaos = true
                isNullableAnnotation = false
                isNonnullAnnotation = false
            }
            this.target = org.jooq.meta.jaxb.Target().apply {
                packageName = jooqPackageName
                directory = "$buildDir/jooq/src/main/java"
            }
        }
    }

    sourceSets["main"].java.srcDir(configuration.generator.target.directory)

    doLast {
        org.jooq.codegen.GenerationTool.generate(configuration)
    }
}

tasks.compileJava {
    dependsOn(jooq)
}
